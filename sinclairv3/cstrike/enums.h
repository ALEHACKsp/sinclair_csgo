#pragma once

enum SendPropType {
	DPT_FLOAT = 1,
	DPT_VECTOR_3D,
	DPT_VECTOR_2D,
	DPT_STRING,
	DPT_ARRAY, //  an array of the base types (can't be of datatables).
	DPT_DATA_TABLE,
	DPT_INT64,
	DPT_NUM_SEND_PROP_TYPES
};

enum ClientFrameStages {
	FRAME_UNDEFINED = -1, //  (haven't run any frames yet)
	START,

	//  A network packet is being recieved
	NET_UPDATE_START,
	//  Data has been received and we're going to start calling PostDataUpdate
	NET_UPDATE_POSTDATAUPDATE_START,
	//  Data has been received and we've called PostDataUpdate on all data
	//  recipients
	NET_UPDATE_POSTDATAUPDATE_END,
	//  We've received all packets, we can now do interpolation, prediction,
	//  etc..
	NET_UPDATE_END,

	//  We're about to start rendering the scene
	RENDER_START,
	//  We've finished rendering the scene.
	RENDER_END
};

enum ClassIds {
	C_AI_BASE_NPC,
	C_AK47,
	C_BASE_ANIMATING,
	C_BASE_ANIMATING_OVERLAY,
	C_BASE_ATTRIBUTABLE_ITEM,
	C_BASE_BUTTON,
	C_BASE_COMBAT_CHARACTER,
	C_BASE_COMBAT_WEAPON,
	C_BASE_CS_GRENADE,
	C_BASE_CS_GRENADE_PROJECTILE,
	C_BASE_DOOR,
	C_BASE_ENTITY,
	C_BASE_FLEX,
	C_BASE_GRENADE,
	C_BASE_PARTICLE_ENTITY,
	C_BASE_PLAYER,
	C_BASE_PROP_DOOR,
	C_BASE_TEAM_OBJECTIVE_RESOURCE,
	C_BASE_TEMP_ENTITY,
	C_BASE_TOGGLE,
	C_BASE_TRIGGER,
	C_BASE_VIEW_MODEL,
	C_BASE_V_PHYSICS_TRIGGER,
	C_BASE_WEAPON_WORLD_MODEL,
	C_BEAM,
	C_BEAM_SPOTLIGHT,
	C_BONE_FOLLOWER,
	C_BRC_4_TARGET,
	C_BREACH_CHARGE,
	C_BREACH_CHARGE_PROJECTILE,
	C_BREAKABLE_PROP,
	C_BREAKABLE_SURFACE,
	C_BUMP_MINE,
	C_BUMP_MINE_PROJECTILE,
	C_C4,
	C_CASCADE_LIGHT,
	C_CHICKEN,
	C_COLOR_CORRECTION,
	C_COLOR_CORRECTION_VOLUME,
	C_CS_GAME_RULES_PROXY,
	C_CS_PLAYER,
	C_CS_PLAYER_RESOURCE,
	C_CS_RAGDOLL,
	C_CS_TEAM,
	C_DANGER_ZONE,
	C_DANGER_ZONE_CONTROLLER,
	C_DEAGLE,
	C_DECOY_GRENADE,
	C_DECOY_PROJECTILE,
	C_DRONE,
	C_DRONEGUN,
	C_DYNAMIC_LIGHT,
	C_DYNAMIC_PROP,
	C_ECON_ENTITY,
	C_ECON_WEARABLE,
	C_EMBERS,
	C_ENTITY_DISSOLVE,
	C_ENTITY_FLAME,
	C_ENTITY_FREEZING,
	C_ENTITY_PARTICLE_TRAIL,
	C_ENV_AMBIENT_LIGHT,
	C_ENV_DETAIL_CONTROLLER,
	C_ENV_DOF_CONTROLLER,
	C_ENV_GAS_CANISTER,
	C_ENV_PARTICLE_SCRIPT,
	C_ENV_PROJECTED_TEXTURE,
	C_ENV_QUADRATIC_BEAM,
	C_ENV_SCREEN_EFFECT,
	C_ENV_SCREEN_OVERLAY,
	C_ENV_TONEMAP_CONTROLLER,
	C_ENV_WIND,
	C_FE_PLAYER_DECAL,
	C_FIRE_CRACKER_BLAST,
	C_FIRE_SMOKE,
	C_FIRE_TRAIL,
	C_FISH,
	C_FISTS,
	C_FLASHBANG,
	C_FOG_CONTROLLER,
	C_FOOTSTEP_CONTROL,
	C_FUNC_DUST,
	C_FUNC_LOD,
	C_FUNC_AREA_PORTAL_WINDOW,
	C_FUNC_BRUSH,
	C_FUNC_CONVEYOR,
	C_FUNC_LADDER,
	C_FUNC_MONITOR,
	C_FUNC_MOVE_LINEAR,
	C_FUNC_OCCLUDER,
	C_FUNC_REFLECTIVE_GLASS,
	C_FUNC_ROTATING,
	C_FUNC_SMOKE_VOLUME,
	C_FUNC_TRACK_TRAIN,
	C_GAME_RULES_PROXY,
	C_GRASS_BURN,
	C_HANDLE_TEST,
	C_HE_GRENADE,
	C_HOSTAGE,
	C_HOSTAGE_CARRIABLE_PROP,
	C_INCENDIARY_GRENADE,
	C_INFERNO,
	C_INFO_LADDER_DISMOUNT,
	C_INFO_MAP_REGION,
	C_INFO_OVERLAY_ACCESSOR,
	C_ITEM_HEALTHSHOT,
	C_ITEM_CASH,
	C_ITEM_DOGTAGS,
	C_KNIFE,
	C_KNIFE_GG,
	C_LIGHT_GLOW,
	C_MAP_VETO_PICK_CONTROLLER,
	C_MATERIAL_MODIFY_CONTROL,
	C_MELEE,
	C_MOLOTOV_GRENADE,
	C_MOLOTOV_PROJECTILE,
	C_MOVIE_DISPLAY,
	C_PARADROP_CHOPPER,
	C_PARTICLE_FIRE,
	C_PARTICLE_PERFORMANCE_MONITOR,
	C_PARTICLE_SYSTEM,
	C_PHYS_BOX,
	C_PHYS_BOX_MULTIPLAYER,
	C_PHYSICS_PROP,
	C_PHYSICS_PROP_MULTIPLAYER,
	C_PHYS_MAGNET,
	C_PHYS_PROP_AMMO_BOX,
	C_PHYS_PROP_LOOT_CRATE,
	C_PHYS_PROP_RADAR_JAMMER,
	C_PHYS_PROP_WEAPON_UPGRADE,
	C_PLANTED_C4,
	C_PLASMA,
	C_PLAYER_PING,
	C_PLAYER_RESOURCE,
	C_POINT_CAMERA,
	C_POINT_COMMENTARY_NODE,
	C_POINT_WORLD_TEXT,
	C_POSE_CONTROLLER,
	C_POST_PROCESS_CONTROLLER,
	C_PRECIPITATION,
	C_PRECIPITATION_BLOCKER,
	C_PREDICTED_VIEW_MODEL,
	C_PROP_HALLUCINATION,
	C_PROP_COUNTER,
	C_PROP_DOOR_ROTATING,
	C_PROP_JEEP,
	C_PROP_VEHICLE_DRIVEABLE,
	C_RAGDOLL_MANAGER,
	C_RAGDOLL_PROP,
	C_RAGDOLL_PROP_ATTACHED,
	C_ROPE_KEYFRAME,
	C_SCAR17,
	C_SCENE_ENTITY,
	C_SENSOR_GRENADE,
	C_SENSOR_GRENADE_PROJECTILE,
	C_SHADOW_CONTROL,
	C_SLIDESHOW_DISPLAY,
	C_SMOKE_GRENADE,
	C_SMOKE_GRENADE_PROJECTILE,
	C_SMOKE_STACK,
	C_SNOWBALL,
	C_SNOWBALL_PILE,
	C_SNOWBALL_PROJECTILE,
	C_SPATIAL_ENTITY,
	C_SPOTLIGHT_END,
	C_SPRITE,
	C_SPRITE_ORIENTED,
	C_SPRITE_TRAIL,
	C_STATUE_PROP,
	C_STEAM_JET,
	C_SUN,
	C_SUNLIGHT_SHADOW_CONTROL,
	C_SURVIVAL_SPAWN_CHOPPER,
	C_TABLET,
	C_TEAM,
	C_TEAMPLAY_ROUND_BASED_RULES_PROXY,
	C_TE_ARMOR_RICOCHET,
	C_TE_BASE_BEAM,
	C_TE_BEAM_ENT_POINT,
	C_TE_BEAM_ENTS,
	C_TE_BEAM_FOLLOW,
	C_TE_BEAM_LASER,
	C_TE_BEAM_POINTS,
	C_TE_BEAM_RING,
	C_TE_BEAM_RING_POINT,
	C_TE_BEAM_SPLINE,
	C_TE_BLOOD_SPRITE,
	C_TE_BLOOD_STREAM,
	C_TE_BREAK_MODEL,
	C_TE_BSP_DECAL,
	C_TE_BUBBLES,
	C_TE_BUBBLE_TRAIL,
	C_TE_CLIENT_PROJECTILE,
	C_TE_DECAL,
	C_TE_DUST,
	C_TE_DYNAMIC_LIGHT,
	C_TE_EFFECT_DISPATCH,
	C_TE_ENERGY_SPLASH,
	C_TE_EXPLOSION,
	C_TE_FIRE_BULLETS,
	C_TE_FIZZ,
	C_TE_FOOTPRINT_DECAL,
	C_TE_FOUNDRY_HELPERS,
	C_TE_GAUSS_EXPLOSION,
	C_TE_GLOW_SPRITE,
	C_TE_IMPACT,
	C_TE_KILL_PLAYER_ATTACHMENTS,
	C_TE_LARGE_FUNNEL,
	C_TE_METAL_SPARKS,
	C_TE_MUZZLE_FLASH,
	C_TE_PARTICLE_SYSTEM,
	C_TE_PHYSICS_PROP,
	C_TE_PLANT_BOMB,
	C_TE_PLAYER_ANIM_EVENT,
	C_TE_PLAYER_DECAL,
	C_TE_PROJECTED_DECAL,
	C_TE_RADIO_ICON,
	C_TE_SHATTER_SURFACE,
	C_TE_SHOW_LINE,
	C_TESLA,
	C_TE_SMOKE,
	C_TE_SPARKS,
	C_TE_SPRITE,
	C_TE_SPRITE_SPRAY,
	C_TEST_PROXY_TOGGLE_NETWORKABLE,
	C_TEST_TRACELINE,
	C_TE_WORLD_DECAL,
	C_TRIGGER_PLAYER_MOVEMENT,
	C_TRIGGER_SOUND_OPERATOR,
	C_VGUI_SCREEN,
	C_VOTE_CONTROLLER,
	C_WATER_BULLET,
	C_WATER_LOD_CONTROL,
	C_WEAPON_AUG,
	C_WEAPON_AWP,
	C_WEAPON_BASE_ITEM,
	C_WEAPON_BIZON,
	C_WEAPON_CS_BASE,
	C_WEAPON_CS_BASE_GUN,
	C_WEAPON_CYCLER,
	C_WEAPON_ELITE,
	C_WEAPON_FAMAS,
	C_WEAPON_FIVESEVEN,
	C_WEAPON_G3SG1,
	C_WEAPON_GALIL,
	C_WEAPON_GALILAR,
	C_WEAPON_GLOCK,
	C_WEAPON_HKP2000,
	C_WEAPON_M249,
	C_WEAPON_M3,
	C_WEAPON_M4A1,
	C_WEAPON_MAC10,
	C_WEAPON_MAG7,
	C_WEAPON_MP5_NAVY,
	C_WEAPON_MP7,
	C_WEAPON_MP9,
	C_WEAPON_NEGEV,
	C_WEAPON_NOVA,
	C_WEAPON_P228,
	C_WEAPON_P250,
	C_WEAPON_P90,
	C_WEAPON_SAWEDOFF,
	C_WEAPON_SCAR20,
	C_WEAPON_SCOUT,
	C_WEAPON_SG550,
	C_WEAPON_SG552,
	C_WEAPON_SG556,
	C_WEAPON_SHIELD,
	C_WEAPON_SSG08,
	C_WEAPON_TASER,
	C_WEAPON_TEC9,
	C_WEAPON_TMP,
	C_WEAPON_UMP45,
	C_WEAPON_USP,
	C_WEAPON_XM1014,
	C_WEAPON_ZONE_REPULSOR,
	C_WORLD,
	C_WORLD_VGUI_TEXT,
	DUST_TRAIL,
	MOVIE_EXPLOSION,
	PARTICLE_SMOKE_GRENADE,
	ROCKET_TRAIL,
	SMOKE_TRAIL,
	SPORE_EXPLOSION,
	SPORE_TRAIL,
};

enum ShouldTransmitState {
	SHOULDTRANSMIT_START = 0,	//  The entity is starting to be transmitted (maybe it entered the PVS).

	SHOULDTRANSMIT_END		//  Called when the entity isn't being transmitted by the server.
							//  This signals a good time to hide the entity until next time
							//  the server wants to transmit its state.
};

//  NOTE: All of these are commented out; NotifyShouldTransmit actually
//  has all these in them. Left it as an enum in case we want to go back though
enum DataUpdateType {
	DATA_UPDATE_CREATED = 0,	//  indicates it was created +and+ entered the pvs
//	DATA_UPDATE_ENTERED_PVS,
DATA_UPDATE_DATATABLE_CHANGED,
//	DATA_UPDATE_LEFT_PVS,
//	DATA_UPDATE_DESTROYED,		//  FIXME: Could enable this, but it's a little worrying
								//  since it changes a bunch of existing code
};

enum InitReturnVal_t {
	INIT_FAILED = 0,
	INIT_OK,

	INIT_LAST_VAL,
};

enum AppSystemTier_t {
	APP_SYSTEM_TIER0 = 0,
	APP_SYSTEM_TIER1,
	APP_SYSTEM_TIER2,
	APP_SYSTEM_TIER3,

	APP_SYSTEM_TIER_OTHER,
};

enum CmdButtons {
	IN_ATTACK = (1 << 0),
	IN_JUMP = (1 << 1),
	IN_DUCK = (1 << 2),
	IN_FORWARD = (1 << 3),
	IN_BACK = (1 << 4),
	IN_USE = (1 << 5),
	IN_MOVELEFT = (1 << 9),
	IN_MOVERIGHT = (1 << 10),
	IN_ATTACK2 = (1 << 11),
	IN_SCORE = (1 << 16),
	IN_BULLRUSH = (1 << 22)
};

enum PlayerFlags {
	FLAG_ONGROUND = (1 << 0),
	FLAG_DUCKING = (1 << 1),
	FLAG_ANIMDUCKING = (1 << 2),
	FLAG_WATERJUMP = (1 << 3),
	FLAG_ONTRAIN = (1 << 4),
	FLAG_INRAIN = (1 << 5),
	FLAG_FROZEN = (1 << 6),
	FLAG_ATCONTROLS = (1 << 7),
	FLAG_CLIENT = (1 << 8),
	FLAG_FAKECLIENT = (1 << 9),
	FLAG_INWATER = (1 << 10),
	FLAG_FLY = (1 << 11),
	FLAG_SWIM = (1 << 12),
	FLAG_CONVEYOR = (1 << 13),
	FLAG_NPC = (1 << 14),
	FLAG_GODMODE = (1 << 15),
	FLAG_NOTARGET = (1 << 16),
	FLAG_ANIMTARGET = (1 << 17),
	FLAG_PARTIALGROUND = (1 << 18),
	FLAG_STATICPROP = (1 << 19),
	FLAG_GRAPHED = (1 << 20),
	FLAG_GRENADE = (1 << 21),
	FLAG_STEPMOVEMENT = (1 << 22),
	FLAG_DONTTOUCH = (1 << 23),
	FLAG_BASEVELOCITY = (1 << 24),
	FLAG_WORLDBRUSH = (1 << 25),
	FLAG_OBJECT = (1 << 26),
	FLAG_KILLME = (1 << 27),
	FLAG_ONFIRE = (1 << 28),
	FLAG_DISSOLVING = (1 << 29),
	FLAG_TRANSRAGDOLL = (1 << 30),
	FLAG_UNBLOCKABLE_BY_PLAYER = (1 << 31)
};

enum MoveTypes {
	MOVETYPE_NONE = 0,
	MOVETYPE_ISOMETRIC,
	MOVETYPE_WALK,
	MOVETYPE_STEP,
	MOVETYPE_FLY,
	MOVETYPE_FLYGRAVITY,
	MOVETYPE_VPHYSICS,
	MOVETYPE_PUSH,
	MOVETYPE_NOCLIP,
	MOVETYPE_LADDER,
	MOVETYPE_OBSERVER,
	MOVETYPE_CUSTOM,
	MOVETYPE_LAST = MOVETYPE_CUSTOM,
	MOVETYPE_MAX_BITS = 4
};

enum TeamIds {
	TEAM_NONE = 0,
	TEAM_SPECTATOR = 1,
	TEAM_TERRORIST = 2,
	TEAM_COUNTER_TERRORIST = 3
};

enum ObserverModes {
	MODE_NONE = 0,
	MODE_DEATHCAM,
	MODE_FREEZECAM,
	MODE_FIXED,
	MODE_IN_EYE,
	MODE_CHASE,
	MODE_ROAMING,
};

enum ChatFilters {
	CHAT_FILTER_NONE = 0,
	CHAT_FILTER_JOINLEAVE = 1,
	CHAT_FILTER_NAMECHANGE = 2,
	CHAT_FILTER_PUBLICCHAT = 4,
	CHAT_FILTER_SERVERMSG = 8,
	CHAT_FILTER_TEAMCHANGE = 10,
	CHAT_FILTER_ACHIEVEMENT = 20
};

enum ButtonCode {
	KEY_INVALID = 0x0,
	KEY_0 = 0x1,
	KEY_1 = 0x2,
	KEY_2 = 0x3,
	KEY_3 = 0x4,
	KEY_4 = 0x5,
	KEY_5 = 0x6,
	KEY_6 = 0x7,
	KEY_7 = 0x8,
	KEY_8 = 0x9,
	KEY_9 = 0xA,
	KEY_A = 0xB,
	KEY_B = 0xC,
	KEY_C = 0xD,
	KEY_D = 0xE,
	KEY_E = 0xF,
	KEY_F = 0x10,
	KEY_G = 0x11,
	KEY_H = 0x12,
	KEY_I = 0x13,
	KEY_J = 0x14,
	KEY_K = 0x15,
	KEY_L = 0x16,
	KEY_M = 0x17,
	KEY_N = 0x18,
	KEY_O = 0x19,
	KEY_P = 0x1A,
	KEY_Q = 0x1B,
	KEY_R = 0x1C,
	KEY_S = 0x1D,
	KEY_T = 0x1E,
	KEY_U = 0x1F,
	KEY_V = 0x20,
	KEY_W = 0x21,
	KEY_X = 0x22,
	KEY_Y = 0x23,
	KEY_Z = 0x24,
	KEY_PAD_0 = 0x25,
	KEY_PAD_1 = 0x26,
	KEY_PAD_2 = 0x27,
	KEY_PAD_3 = 0x28,
	KEY_PAD_4 = 0x29,
	KEY_PAD_5 = 0x2A,
	KEY_PAD_6 = 0x2B,
	KEY_PAD_7 = 0x2C,
	KEY_PAD_8 = 0x2D,
	KEY_PAD_9 = 0x2E,
	KEY_PAD_DIVIDE = 0x2F,
	KEY_PAD_MULTIPLY = 0x30,
	KEY_PAD_MINUS = 0x31,
	KEY_PAD_PLUS = 0x32,
	KEY_PAD_ENTER = 0x33,
	KEY_PAD_DECIMAL = 0x34,
	KEY_LBRACKET = 0x35,
	KEY_RBRACKET = 0x36,
	KEY_SEMICOLON = 0x37,
	KEY_APOSTROPHE = 0x38,
	KEY_BACKQUOTE = 0x39,
	KEY_COMMA = 0x3A,
	KEY_PERIOD = 0x3B,
	KEY_SLASH = 0x3C,
	KEY_BACKSLASH = 0x3D,
	KEY_MINUS = 0x3E,
	KEY_EQUAL = 0x3F,
	KEY_ENTER = 0x40,
	KEY_SPACE = 0x41,
	KEY_BACKSPACE = 0x42,
	KEY_TAB = 0x43,
	KEY_CAPSLOCK = 0x44,
	KEY_NUMLOCK = 0x45,
	KEY_ESCAPE = 0x46,
	KEY_SCROLLLOCK = 0x47,
	KEY_INSERT = 0x48,
	KEY_DELETE = 0x49,
	KEY_HOME = 0x4A,
	KEY_END = 0x4B,
	KEY_PAGEUP = 0x4C,
	KEY_PAGEDOWN = 0x4D,
	KEY_BREAK = 0x4E,
	KEY_LSHIFT = 0x4F,
	KEY_RSHIFT = 0x50,
	KEY_LALT = 0x51,
	KEY_RALT = 0x52,
	KEY_LCONTROL = 0x53,
	KEY_RCONTROL = 0x54,
	KEY_LWIN = 0x55,
	KEY_RWIN = 0x56,
	KEY_APP = 0x57,
	KEY_UP = 0x58,
	KEY_LEFT = 0x59,
	KEY_DOWN = 0x5A,
	KEY_RIGHT = 0x5B,
	KEY_F1 = 0x5C,
	KEY_F2 = 0x5D,
	KEY_F3 = 0x5E,
	KEY_F4 = 0x5F,
	KEY_F5 = 0x60,
	KEY_F6 = 0x61,
	KEY_F7 = 0x62,
	KEY_F8 = 0x63,
	KEY_F9 = 0x64,
	KEY_F10 = 0x65,
	KEY_F11 = 0x66,
	KEY_F12 = 0x67,
	KEY_MOUSE_1 = 0x6B,
	KEY_MOUSE_2 = 0x6C,
	KEY_MOUSE_3 = 0x6D,
	KEY_MOUSE_4 = 0x6E,
	KEY_MOUSE_5 = 0x6F
};

enum CursorCode {
	DC_USER,
	DC_NONE,
	DC_ARROW,
	DC_IBEAM,
	DC_HOURGLASS,
	DC_WAITARROW,
	DC_CROSSHAIR,
	DC_UP,
	DC_SIZENWSE,
	DC_SIZENESW,
	DC_SIZEWE,
	DC_SIZENS,
	DC_SIZEALL,
	DC_NO,
	DC_HAND,
	DC_BLANK, //  don't show any custom vgui cursor, just let windows do it stuff (for HTML widget)
	DC_LAST,
};

enum TraceType {
	TRACE_EVERYTHING = 0,
	TRACE_WORLD_ONLY,
	TRACE_ENTITIES_ONLY,
	TRACE_EVERYTHING_FILTER_PROPS,
};

enum Contents {
	CONTENTS_EMPTY = 0X0,
	CONTENTS_SOLID = 0X1,
	CONTENTS_WINDOW = 0X2,
	CONTENTS_AUX = 0X4,
	CONTENTS_GRATE = 0X8,
	CONTENTS_SLIME = 0X10,
	CONTENTS_WATER = 0X20,
	CONTENTS_BLOCKLOS = 0X40,
	CONTENTS_OPAQUE = 0X80,
	CONTENTS_TESTFOGVOLUME = 0X100,
	CONTENTS_UNUSED = 0X200,
	CONTENTS_BLOCKLIGHT = 0X400,
	CONTENTS_TEAM1 = 0X800,
	CONTENTS_TEAM2 = 0X1000,
	CONTENTS_IGNORE_NODRAW_OPAQUE = 0X2000,
	CONTENTS_MOVEABLE = 0X4000,
	CONTENTS_AREAPORTAL = 0X8000,
	CONTENTS_PLAYERCLIP = 0X10000,
	CONTENTS_MONSTERCLIP = 0X20000,
	CONTENTS_CURRENT0 = 0X40000,
	CONTENTS_CURRENT90 = 0X80000,
	CONTENTS_CURRENT180 = 0X100000,
	CONTENTS_CURRENT270 = 0X200000,
	CONTENTS_CURRENT_UP = 0X400000,
	CONTENTS_CURRENT_DOWN = 0X800000,
	CONTENTS_ORIGIN = 0X1000000,
	CONTENTS_MONSTER = 0X2000000,
	CONTENTS_DEBRIS = 0X4000000,
	CONTENTS_DETAIL = 0X8000000,
	CONTENTS_TRANSLUCENT = 0X10000000,
	CONTENTS_LADDER = 0X20000000,
	CONTENTS_HITBOX = 0X40000000,

	LAST_VISIBLE_CONTENTS = CONTENTS_OPAQUE,
	ALL_VISIBLE_CONTENTS = LAST_VISIBLE_CONTENTS | LAST_VISIBLE_CONTENTS - 1
};

enum Masks {
	MASK_ALL = 0XFFFFFFFF,
	MASK_SOLID = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_MONSTER | CONTENTS_GRATE),
	MASK_PLAYERSOLID = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_PLAYERCLIP | CONTENTS_WINDOW | CONTENTS_MONSTER | CONTENTS_GRATE),
	MASK_NPCSOLID = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_MONSTERCLIP | CONTENTS_WINDOW | CONTENTS_MONSTER | CONTENTS_GRATE),
	MASK_NPCFLUID = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_MONSTERCLIP | CONTENTS_WINDOW | CONTENTS_MONSTER),
	MASK_WATER = (CONTENTS_WATER | CONTENTS_MOVEABLE | CONTENTS_SLIME),
	MASK_OPAQUE = (CONTENTS_WATER | CONTENTS_MOVEABLE | CONTENTS_OPAQUE),
	MASK_OPAQUE_NPC = (MASK_OPAQUE | CONTENTS_MONSTER),
	MASK_BLOCKLOS = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_SLIME),
	MASK_BLOCKLOS_NPC = (MASK_BLOCKLOS | CONTENTS_MONSTER),
	MASK_VISIBLE = (MASK_OPAQUE | CONTENTS_IGNORE_NODRAW_OPAQUE),
	MASK_VISIBLE_NPC = (MASK_OPAQUE_NPC | CONTENTS_IGNORE_NODRAW_OPAQUE),
	MASK_SHOT = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_MONSTER | CONTENTS_WINDOW | CONTENTS_DEBRIS | CONTENTS_HITBOX),
	MASK_SHOT_BRUSHONLY = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_DEBRIS),
	MASK_SHOT_HULL = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_MONSTER | CONTENTS_WINDOW | CONTENTS_DEBRIS | CONTENTS_GRATE),
	MASK_SHOT_PLAYER = (MASK_SHOT_HULL | CONTENTS_HITBOX),
	MASK_SHOT_PORTAL = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_MONSTER),
	MASK_SOLID_BRUSHONLY = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_GRATE),
	MASK_PLAYERSOLID_BRUSHONLY = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_PLAYERCLIP | CONTENTS_GRATE),
	MASK_NPCSOLID_BRUSHONLY = (CONTENTS_SOLID | CONTENTS_MOVEABLE | CONTENTS_WINDOW | CONTENTS_MONSTERCLIP | CONTENTS_GRATE),
	MASK_NPCWORLDSTATIC = (CONTENTS_SOLID | CONTENTS_WINDOW | CONTENTS_MONSTERCLIP | CONTENTS_GRATE),
	MASK_NPCWORLDSTATIC_FLUID = (CONTENTS_SOLID | CONTENTS_WINDOW | CONTENTS_MONSTERCLIP),
	MASK_SPLITAREAPORTAL = (CONTENTS_WATER | CONTENTS_SLIME),
	MASK_CURRENT = (CONTENTS_CURRENT0 | CONTENTS_CURRENT90 | CONTENTS_CURRENT180 | CONTENTS_CURRENT270 | CONTENTS_CURRENT_UP | CONTENTS_CURRENT_DOWN),
	MASK_DEADSOLID = (CONTENTS_SOLID | CONTENTS_PLAYERCLIP | CONTENTS_WINDOW | CONTENTS_GRATE)
};

enum ClcMessages {
	CLC_CLIENT_INFO = 8,   //	client info (table CRC etc)
	CLC_MOVE = 9,              //	[CUserCmd]
	CLC_VOICE_DATA = 10,        //	Voicestream data from a client
	CLC_BASELINE_ACK = 11,      //	client acknowledges a new baseline seqnr
	CLC_LISTEN_EVENTS = 12,     //	client acknowledges a new baseline seqnr
	CLC_RESPOND_CVAR_VALUE = 13, //	client is responding to a svc_GetCvarValue message.
	CLC_FIRE_CRC_CHECK = 14,     //	client is sending a file's CRC to the server to be verified.
	CLC_LOADING_PROGRESS = 15,  //	client loading progress
	CLC_SPLIT_PLAYER_CONNECT = 16,
	CLC_CLIENT_MESSAGE = 17,
	CLC_CMD_KEY_VALUES = 18,
	CLC_HLTV_REPLAY = 20
};

enum WeaponType {
	TYPE_KNIFE = 0,
	TYPE_PISTOL,
	TYPE_SUBMACHINE_GUN,
	TYPE_RIFLE,
	TYPE_SHOTGUN,
	TYPE_SNIPER_RIFLE,
	TYPE_MACHINE_GUN,
	TYPE_C4,
	TYPE_PLACEHOLDER,
	TYPE_GRENADE,
	TYPE_UNKNOWN,
	TYPE_STACKABLE_ITEM,
	TYPE_FISTS,
	TYPE_BREACH_CHARGE,
	TYPE_BUMP_MINE,
	TYPE_TABLET,
	TYPE_MELEE
};

enum PaintMode {
	PAINT_UI_PANELS = (1 << 0),
	PAINT_IN_GAME_PANELS = (1 << 1),
};